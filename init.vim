call plug#begin('~/.vim/plugged')

Plug 'EdenEast/nightfox.nvim'
Plug 'sheerun/vim-polyglot'
Plug 'trevordmiller/nova-vim'
Plug 'jwalton512/vim-blade'
Plug 'mattn/emmet-vim'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/goyo.vim'
Plug 'moll/vim-bbye'
Plug 'iamcco/markdown-preview.vim'
Plug 'Chiel92/vim-autoformat'
Plug 'tomtom/tcomment_vim'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'Yggdroot/indentLine'
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" neovim
Plug 'nvim-lualine/lualine.nvim'
Plug 'kyazdani42/nvim-web-devicons'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'mhinz/vim-startify'

call plug#end()

colorscheme nordfox

" set leader key
let mapleader=","

set t_Co=256

" markdown
set conceallevel=0

highlight Comment cterm=italic

if (has("nvim"))
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif

if (has("termguicolors"))
    set termguicolors
endif

" fzf vim setting

" General
" set number              " Show line numbers
" set number relativenumber
set foldcolumn=3        " add margin on left vim
set linespace=15
set linebreak           " Break lines at word (requires Wrap lines)
set breakindent
set showmatch           " Highlight matching brace
set visualbell          " Use visual bell (no beeping)

set hlsearch            " Highlight all search results
set smartcase           " Enable smart-case search
set ignorecase          " Always case-insensitive
set incsearch           " Searches for strings incrementally

set autoindent          " Auto-indent new lines
set expandtab           " Use spaces instead of tabs
set smarttab            " Enable smart-tabs
set tabstop=4
set shiftwidth=4
set softtabstop=4

" Advanced
set ruler                       " Show row and column ruler information

set undolevels=1000     " Number of undo levels
set backspace=indent,eol,start  " Backspace behaviour
" set colorcolumn=80

" Generated by VimConfig.com
inoremap jj <ESC>
inoremap kk <ESC>

" map for save
nnoremap ;; :w<CR>

" map for buffer
" nnoremap bn :bn<CR>
" nnoremap bp :bp<CR>
" nnoremap bd :bd<CR>

" netrw setup
let g:netrw_banner = 0
" set autochdir

set mouse=a

" map for noh
nnoremap ,<space> :noh<CR>

" disable arrow
nnoremap <Up> :echomsg "use k"<cr>
nnoremap <Down> :echomsg "use j"<cr>
nnoremap <Left> :echomsg "use h"<cr>
nnoremap <Right> :echomsg "use l"<cr>

" split panel shortcut movement
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Move to beginning/end of line
nnoremap B ^
nnoremap E $
vnoremap E $

filetype plugin indent on

autocmd BufRead,BufNewFile *.blade.php set filetype=blade

" Define some single Blade directives. This variable is used for highlighting only.
let g:blade_custom_directives = ['datetime', 'javascript']
"
" " Define pairs of Blade directives. This variable is used for highlighting and indentation.
let g:blade_custom_directives_pairs = {
            \   'markdown': 'endmarkdown',
            \   'cache': 'endcache',
            \ }

" emmet: to trigger press double ,,
let g:user_emmet_leader_key=','

" WSL yank support
let s:clip = '/mnt/c/Windows/System32/clip.exe'  " default location
if executable(s:clip)
    augroup WSLYank
        autocmd!
        autocmd TextYankPost * call system(s:clip, join(v:event.regcontents, "\<CR>"))
    augroup END
end

" markdown preview set
let g:mkdp_path_to_chrome = '/mnt/c/Program\ Files\ \(x86\)/Google/Chrome/Application/chrome.exe'

" python3 from powerline.vim import setup as powerline_setup
" python3 powerline_setup()
" python3 del powerline_setup
set laststatus=2

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" COC settings
" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

set directory=~/.vim/swapfiles/

" change cursor when change mode
let &t_SI = "\<esc>[5 q"
let &t_SR = "\<esc>[5 q"
let &t_EI = "\<esc>[2 q"

" remap q simple recording
nnoremap <Space> @q

" remap tab
nnoremap te :tabedit<CR>
nnoremap tn :tabn<CR>
nnoremap tp :tabn<CR>
nnoremap tc :tabc<CR>

highlight htmlArg cterm=italic

let g:indentLine_char = 'â”‚'
let g:indentLine_enabled = 1

highlight EndOfBuffer ctermfg=black ctermbg=black

lua << END
require('lualine').setup()
END

" auto tab size on spesific language
autocmd Filetype javascript setlocal tabstop=2 shiftwidth=2 softtabstop=0 expandtab
autocmd Filetype vue setlocal tabstop=2 shiftwidth=2 softtabstop=0 expandtab
autocmd Filetype typescript setlocal tabstop=2 shiftwidth=2 softtabstop=0 expandtab
autocmd Filetype html setlocal tabstop=2 shiftwidth=2 softtabstop=0 expandtab
autocmd Filetype css setlocal tabstop=2 shiftwidth=2 softtabstop=0 expandtab
autocmd Filetype go setlocal tabstop=4 softtabstop=0 noexpandtab
autocmd Filetype php setlocal tabstop=4 softtabstop=0 noexpandtab
autocmd Filetype python setlocal tabstop=4 shiftwidth=4 softtabstop=0 expandtab

" Find files using Telescope command-line sugar.
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>

" Using Lua functions
nnoremap <leader>ff <cmd>lua require('telescope.builtin').find_files()<cr>
nnoremap <leader>fg <cmd>lua require('telescope.builtin').live_grep()<cr>
nnoremap <leader>fb <cmd>lua require('telescope.builtin').buffers()<cr>
nnoremap <leader>fh <cmd>lua require('telescope.builtin').help_tags()<cr>

let g:coc_global_extensions = [
      \'coc-prettier',
      \'coc-vetur',
      \'coc-json', 
      \'@yaegassy/coc-intelephense', 
      \]
