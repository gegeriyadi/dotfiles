call plug#begin('~/.vim/plugged')

Plug 'drewtempelmeyer/palenight.vim'
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'morhetz/gruvbox'
Plug 'arcticicestudio/nord-vim'
Plug 'joshdick/onedark.vim'
" Plug 'itchyny/lightline.vim'
" Plug 'powerline/powerline'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'StanAngeloff/php.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'jwalton512/vim-blade'
Plug 'mattn/emmet-vim'
Plug 'edkolev/tmuxline.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/goyo.vim'
Plug 'moll/vim-bbye'
Plug 'iamcco/markdown-preview.vim'
Plug 'Chiel92/vim-autoformat'
Plug 'tomtom/tcomment_vim'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
let g:deoplete#enable_at_startup = 1
Plug 'posva/vim-vue'
Plug 'Yggdroot/indentLine'

call plug#end()

set background=dark
colorscheme nord
set t_Co=256

" let g:lightline = { 'colorscheme':'nord' }

" Italics for my favorite color scheme
" let g:palenight_terminal_italics=1

highlight Comment cterm=italic

if (has("nvim"))
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif

if (has("termguicolors"))
    set termguicolors
endif

" fzf vim setting
map <C-P> :Files<CR>
nmap ff :call fzf#run({
            \ 'source': 'git ls-files --exclude-standard --others --cached',
            \ 'sink': 'edit'
            \ })<Enter>

" tmuxline setting
" let g:tmuxline_powerline_separators=0
" let g:tmuxline_separators = {
"             \ 'left' : '',
"             \ 'left_alt': '>',
"             \ 'right' : '',
"             \ 'right_alt' : '<',
"             \ 'space' : ' '}
" let g:tmuxline_theme = 'Dracula'
"
" General
set number                      " Show line numbers
set linespace=15
set linebreak           " Break lines at word (requires Wrap lines)
set breakindent
set showbreak=>>       " Wrap-broken line prefix
set textwidth=100       " Line wrap (number of cols)
" set colorcolumn=80
set showmatch           " Highlight matching brace
set visualbell          " Use visual bell (no beeping)

set hlsearch            " Highlight all search results
set smartcase           " Enable smart-case search
set ignorecase          " Always case-insensitive
set incsearch           " Searches for strings incrementally

" set shiftwidth=2
" set softtabstop=2

set autoindent          " Auto-indent new lines
set expandtab           " Use spaces instead of tabs
set smartindent         " Enable smart-indent
set smarttab            " Enable smart-tabs

" Advanced
set ruler                       " Show row and column ruler information

set undolevels=1000     " Number of undo levels
set backspace=indent,eol,start  " Backspace behaviour
set colorcolumn=80


" Generated by VimConfig.com
inoremap jj <ESC>

" map for buffer
nnoremap <F3> :bn<CR>
nnoremap <F2> :bp<CR>

" map for save
nnoremap ;; :w<CR>

" map for Buffers
" nnoremap buf :Buffers<CR>

" map for noh
nnoremap ,<space> :noh<CR>

" disable arrow
nnoremap <Up> :echomsg "use k"<cr>
nnoremap <Down> :echomsg "use j"<cr>
nnoremap <Left> :echomsg "use h"<cr>
nnoremap <Right> :echomsg "use l"<cr>

" split panel shortcut
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" airline theme
let g:airline_theme='base16'

" Define some single Blade directives. This variable is used for highlighting only.
let g:blade_custom_directives = ['datetime', 'javascript']
"
" " Define pairs of Blade directives. This variable is used for highlighting and indentation.
let g:blade_custom_directives_pairs = {
            \   'markdown': 'endmarkdown',
            \   'cache': 'endcache',
            \ }

" emmet
" let g:user_emmet_leader_key='<C-E>'

" WSL yank support
let s:clip = '/mnt/c/Windows/System32/clip.exe'  " default location
if executable(s:clip)
    augroup WSLYank
        autocmd!
        autocmd TextYankPost * call system(s:clip, join(v:event.regcontents, "\<CR>"))
    augroup END
end

" markdown preview set
let g:mkdp_path_to_chrome = '/mnt/c/Program\ Files\ \(x86\)/Google/Chrome/Application/chrome.exe'

" auto format on save
" au BufWrite * :Autoformat
"
set laststatus=2

" deoplete
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

autocmd BufRead,BufNewFile *.vue set sw=2 sts=2
autocmd BufRead,BufNewFile *.blade.php set sw=2 sts=2
autocmd BufRead,BufNewFile *.php set sw=4 sts=4
